What is git?  Git is code version control system.  
git explained:
Imagine that you are writing a book.  You’re throwing thoughts onto pages and when you’re done, with luck you’ll have a story worth reading.  But what about the tough parts along the way?  What if you wrote each thought as its own fragment, but also created a note (for the author only) that explains your thinking on why you wrote what you wrote and how it might fit into the big picture?  The git tool can satisfy these needs.  The code being committed to the repository is represented by the writers thought fragment that the reader will eventually read in the printed copy.  The commit message is the author’s note that might be tremendously helpful to the author (or other team members), but of literally no use to the reader.  The thought fragment (code) and author’s note (commit message) are the two components that make up a commit (An author would likely never use git in writing a book, so the analogy admittedly breaks down here somewhat).  
Commits are numbered.  The number is randomly generated by an algorithm and has no relevance whatsoever to the commit’s contents.  The number is however, a great bookmark!  This number is referred to as an SHA.
If you’re working on a project and find that you’ve royally buggered up the whole mess, but it used to be in good shape at some point, git can rescue you from yourself and get you back to a “last known good” situation.

git clone = please copy someone’s repository
git checkout = Of the versions you have on record, please bring me the branch/tag/SHA at a specified point in time
git reset = let’s go back in time
HEAD = the SHA (bookmark) you’re currently using or referencing
git reset --hard HEAD~1 = Take away the most recent commit.  This will remove both the commit message and the code changes associated with that commit.
git reset --soft HEAD~1 = Take away the most recent commit message and “unstage” the code changes, but do not remove those code changes locally.  (this one is confusing – consider rewording)
git fetch = read another git repository.  This is usually done for the purpose of preparing to cherry-pick a commit (more on that later).  
